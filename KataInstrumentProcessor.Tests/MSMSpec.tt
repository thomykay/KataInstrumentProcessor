<#
/*
MSMSpec Version 0.1
Find latest version and documentation at http://msmspec.codeplex.com

Maintained by Ashic Mahtab
ashic@live.com
http://twitter.com/ashic
http://www.heartysoft.com

Related blog posts: http://www.heartysoft.com/post/2011/03/07/Introducing-MSMSpec.aspx

Please use in accordance to the license (http://msmspec.codeplex.com/license)
*/
#><#@ template language="C#" debug="true" hostspecific="true" #>
<#@ assembly name="System.Core" #> 
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="EnvDTE90" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="Microsoft.VisualStudio.OLE.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #> 
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="VSLangProj" #><#Execute(this); #><#+

	static bool AlwaysKeepTemplateDirty = false;
	const bool ShouldGenerateHelper = true;
	
	string script = @"namespace MSMSpec
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Reflection;
	using Machine.Specifications;
	using Microsoft.VisualStudio.TestTools.UnitTesting;
	
    [System.Diagnostics.DebuggerStepThrough]
    public static class TestExecutionHelper
    {
        private static IEnumerable<FieldInfo> GetFields(Type type)
        {
            var fields = type.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.DeclaredOnly);
            return fields;
        }

        private static IEnumerable<FieldInfo> FilterByType<TFieldType>(IEnumerable<FieldInfo> fields)
        {
            var fieldType = typeof(TFieldType);
            var filtered = fields.Where(x => x.FieldType == fieldType);
            return filtered;
        }

        public static void Process<T>(Dictionary<string, Action> results)
        {
		    if (typeof(T).IsDefined(typeof(Machine.Specifications.IgnoreAttribute), false))
            {
                return;
            }
			
            var instance = Activator.CreateInstance<T>();
            var heirarchy = GetClassHeirarchyTopDown<T>();
            var fieldInfos = heirarchy.SelectMany(x => GetFields(x));
            
            var establishInfos = FilterByType<Establish>(fieldInfos);
            var becauseInfos = FilterByType<Because>(fieldInfos);
            var its = FilterByType<It>(fieldInfos);
            var cleanupInfos = FilterByType<Cleanup>(fieldInfos);

            ExecuteDelegateFieldsOnInstance(establishInfos, instance);
            ExecuteDelegateFieldsOnInstance(becauseInfos, instance);
            
            ProcessIts(its, instance, results);

            ExecuteDelegateFieldsOnInstance(cleanupInfos, instance);
        }

        private static void ProcessIts<T>(IEnumerable<FieldInfo> its, T instance, Dictionary<string, Action> results)
        {
            foreach (var it in its)
            {
			    if (it.IsDefined(typeof(Machine.Specifications.IgnoreAttribute), false))
                {
                    continue;
                }
				
                dynamic method = it.GetValue(instance);
                ExecuteItMethod(results, it, method);
            }
        }

        private static void ExecuteItMethod(Dictionary<string, Action> results, FieldInfo it, dynamic method)
        {
            if (IsTheItImplemented(method))
            {
                ExecuteTheItAndStoreAnyExceptionInResults(it, method, results);
            }
            else
            {
                AddNotImplementedItToResults(it, results);
            }
        }

        private static void ExecuteTheItAndThrowAnyException(FieldInfo it, dynamic method, Dictionary<string, Action> results)
        {
            method();
            results.Add(it.Name, () => { });
        }

        private static void ExecuteTheItAndStoreAnyExceptionInResults(FieldInfo it, dynamic method, Dictionary<string, Action> results)
        {
            try
            {
                method();
                results.Add(it.Name, () => { });
            }
            catch (Exception e)
            {
				var _e = e;
                results.Add(it.Name, () => { throw _e; });
            }
        }

        private static void AddNotImplementedItToResults(FieldInfo it, Dictionary<string, Action> results)
        {
            var name = it.Name;
            results.Add(name, () => Assert.Inconclusive(""Not implemented : {0}"", name));
        }

        private static dynamic IsTheItImplemented(dynamic method)
        {
            return method != null;
        }

        private static void ExecuteDelegateFieldsOnInstance(IEnumerable<FieldInfo> delegateFieldInfos, object instance)
        {
            foreach (var delegateFieldInfo in delegateFieldInfos)
            {
                dynamic method = delegateFieldInfo.GetValue(instance);
                if(method != null) 
                    method();
            }
        }    

        private static IEnumerable<Type> GetClassHeirarchyTopDown<T>()
        {
            var baseType = typeof(T);

            List<Type> types = new List<Type>();

            while (baseType != typeof(object))
            {
                types.Add(baseType);
                baseType = baseType.BaseType;
            }

            types.Reverse();

            return types;
        }
    }
}";

	const string ItTypeName = "Machine.Specifications.It";
	const string EstablishTypeName = "Machine.Specifications.Establish";
	const string BecauseTypeName = "Machine.Specifications.Because";
	const string CleanupTypeName = "Machine.Specifications.Cleanup";
	const string IgnoredAttributeTypeName = "Machine.Specifications.IgnoreAttribute";
	const string TestClassName = "TestClass";
	const string TestMethodName = "TestMethod";
	const string ClassInitializeName = "ClassInitialize";
	
	const string CsGuid = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}";
	const string TestGuid = "{3AC096D0-A1C2-E12C-1390-A8335801FDAB}";
	
	const string ClassInitializeMethodName = "_Setup";
	
	static TextTransformation TT;
    static DTE Dte;
    static Project Project;
    static Manager manager;
	
	void Execute(TextTransformation tt)
	{
		manager = Manager.Create(Host, GenerationEnvironment);
	    TT = tt;
        var hostServiceProvider = Host as IServiceProvider;	
        Dte = hostServiceProvider.GetService(typeof(SDTE)) as DTE;

        // Fail if we couldn't get the DTE. This can happen when trying to run in TextTransform.exe
        if (Dte == null)
        {
	       throw new Exception("MSMSpec can only execute through the Visual Studio host");
		}

        Project = GetProjectContainingT4File(Dte);

        if (Project == null)
        {
			Error("Could not find the VS Project containing the T4 file.");
			return;
		}

		
		AddProjectReferencesIfNotPresent(Project);
		ProcessProjectCSharpFiles();
		manager.Process(true);
		MakeProjectMSTestProjectIfNotAlready(Project);
		GenerateHelper();
	}
	
	void GenerateHelper()
	{
		if(ShouldGenerateHelper)
		{
			RenderLine(script);
		}
	}
	
	void AddProjectReferencesIfNotPresent(Project project)
	{
		VSProject vsProject = (VSProject)project.Object;
		vsProject.References.Add("Microsoft.VisualStudio.QualityTools.UnitTestFramework.dll");
	}
	
	void MakeProjectMSTestProjectIfNotAlready(Project project)
	{
		string guids = GetProjectTypeGuids(project);
		List<string> parts = guids.Split(new char[]{';'}, StringSplitOptions.RemoveEmptyEntries).ToList();
		
		if(parts.Contains(CsGuid) == false)
		{
			//not a csharp project...just return. May need to revisit this later
			return;
		}
		
		if(parts.Contains(TestGuid) == true)
		{
			return;
		}
		
		parts.Insert(parts.Count - 1, TestGuid);
				
		string newProjectTypeString = string.Join(";", parts);
		SetProjectTypeGuids(project, newProjectTypeString);
	}

	
	public void SetProjectTypeGuids(EnvDTE.Project proj, string projectTypeString)
	{
      object service = null;
      Microsoft.VisualStudio.Shell.Interop.IVsSolution solution = null;
      Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy = null;
      Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject aggregatableProject = null;
      int result = 0;

      service = GetService(proj.DTE, typeof(Microsoft.VisualStudio.Shell.Interop.IVsSolution));
      solution = (Microsoft.VisualStudio.Shell.Interop.IVsSolution)service;

      result = solution.GetProjectOfUniqueName(proj.UniqueName, out hierarchy);

      if (result == 0)
      {
        aggregatableProject = (Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject) hierarchy;
		result = aggregatableProject.SetAggregateProjectTypeGuids(projectTypeString);
		proj.Save();
      }
	}
	
   	public string GetProjectTypeGuids(EnvDTE.Project proj)
   	{
      string projectTypeGuids = "";
      object service = null;
      Microsoft.VisualStudio.Shell.Interop.IVsSolution solution = null;
      Microsoft.VisualStudio.Shell.Interop.IVsHierarchy hierarchy = null;
      Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject aggregatableProject = null;
      int result = 0;

      service = GetService(proj.DTE, typeof(Microsoft.VisualStudio.Shell.Interop.IVsSolution));
      solution = (Microsoft.VisualStudio.Shell.Interop.IVsSolution)service;

      result = solution.GetProjectOfUniqueName(proj.UniqueName, out hierarchy);

      if (result == 0)
      {
         aggregatableProject = (Microsoft.VisualStudio.Shell.Interop.IVsAggregatableProject) hierarchy;
         result = aggregatableProject.GetAggregateProjectTypeGuids(out projectTypeGuids);
      }

      return projectTypeGuids;
   	}

   	public object GetService(object serviceProvider, System.Type type)
   	{
      return GetService(serviceProvider, type.GUID);
   	}

   	public object GetService(object serviceProviderObject, System.Guid guid)
   	{
      object service = null;
      Microsoft.VisualStudio.OLE.Interop.IServiceProvider serviceProvider = null;
      IntPtr serviceIntPtr;
      int hr = 0;
      Guid SIDGuid;
      Guid IIDGuid;

      SIDGuid = guid;
      IIDGuid = SIDGuid;
      serviceProvider = (Microsoft.VisualStudio.OLE.Interop.IServiceProvider)serviceProviderObject;
      hr = serviceProvider.QueryService(ref SIDGuid, ref IIDGuid, out serviceIntPtr);

      if (hr != 0)
      {
         System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(hr);
      }
      else if (!serviceIntPtr.Equals(IntPtr.Zero))
      {
         service = System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(serviceIntPtr);
         System.Runtime.InteropServices.Marshal.Release(serviceIntPtr);
      }

      return service;
   	}
	
	void ProcessProjectCSharpFiles()
	{
		foreach(ProjectItem item in GetCSharpCodeFiles())
		{
			IEnumerable<CodeClass2> classesWithTestElementInFile = GetClassesWithTestElements(item);
			
			if(classesWithTestElementInFile.Count() == 0)
			{
				DeleteAssociatedMSTestFileIfPresent(item);
				continue;
			}
			
			ProcessTestClassFile(item, classesWithTestElementInFile);
			item.Save();
		}
	}
	
	void DeleteAssociatedMSTestFileIfPresent(ProjectItem codeFile)
	{
		foreach(ProjectItem file in codeFile.ProjectItems)
		{
			if(file.FileNames[0].EndsWith(".mstest.cs"))
				DeleteFile(file);
		}
	}
	
	void DeleteFile(ProjectItem file)
	{
		manager.DeleteProjectItem(file);	
	}
	
	bool IsMSMSpecTestFile(ProjectItem file)
	{
		return file.Name.EndsWith("mstest.cs");
	}
    
	void ProcessTestClassFile(ProjectItem theCodeFile, IEnumerable<CodeClass2> testClassesInFile)
	{
		string path = GetPathForGeneratedTestFile(theCodeFile);
		manager.StartNewFile(theCodeFile, path);

		RenderTopLevelNamespacesForMSTest();
		
		foreach(CodeClass2 @class in testClassesInFile)
		{
			ProcessTestClass(@class);
		}
		
		manager.EndBlock();
	}
	
	void RenderTopLevelNamespacesForMSTest()
	{
		RenderLine("using System;");
		RenderLine("using System.Collections.Generic;");
		RenderLine("using Microsoft.VisualStudio.TestTools.UnitTesting;");
		RenderLine(string.Empty);
	}
	
	string GetPathForGeneratedTestFile(ProjectItem theCodeFile)
	{
		var path = theCodeFile.FileNames[0];
		var directory = Path.GetDirectoryName(path);
		var filename = Path.GetFileNameWithoutExtension(path);
		var extension = Path.GetExtension(path);
		var newPath = Path.Combine(directory, filename + ".mstest" + extension);
		
		return newPath;
	}

	IEnumerable<ProjectItem> GetCSharpCodeFiles()
	{
		IEnumerable<ProjectItem> cSharpFiles = GetCSharpCodeFiles(Project.ProjectItems);
		
		foreach(ProjectItem item in cSharpFiles)
		{
			if(item.FileCodeModel != null && item.FileCodeModel.Language == CodeModelLanguageConstants.vsCMLanguageCSharp)
				yield return item;
		}
	}
	
	
	IEnumerable<ProjectItem> GetCSharpCodeFiles(ProjectItems items)
	{
		foreach(ProjectItem item in items)
		{
			if(IsProjectItemADirectory(item))
			{
				foreach(ProjectItem nestedItem in GetCSharpCodeFiles(item.ProjectItems))
				{
					yield return nestedItem;
				}
			}
			else if(item.FileCodeModel != null && item.FileCodeModel.Language == CodeModelLanguageConstants.vsCMLanguageCSharp)
			{
				yield return item;
			}
		}
	}
	
	
	IEnumerable<CodeClass2> GetClassesWithTestElements(ProjectItem projectItem)
	{
		return CodeElementsInProjectItem(projectItem)
            .Where(x => x.Kind == vsCMElement.vsCMElementClass)
            .Cast<CodeClass2>()
            .Where(y=>Variables(y).Any(z=>IsVariableOfTestElementType(z)));
	}
	
	bool HasIgnoredAttribute(CodeClass2 codeClass)
	{
		return Attributes(codeClass).Any(x=>x.FullName == IgnoredAttributeTypeName);
	}
	
	bool HasIgnoredAttribute(CodeVariable2 variable)
	{
		return Attributes(variable).Any(x=>x.FullName == IgnoredAttributeTypeName);
	}

	bool IsVariableOfTestElementType(CodeVariable2 variable)
	{
		var name = variable.Type.AsString;
		return name == ItTypeName || name == BecauseTypeName || name == EstablishTypeName || name == CleanupTypeName;
	}

    void ProcessTestClass(CodeClass2 codeClass)
    {
	    SetOriginalClassAsPartial(codeClass);
        RenderMSTestClass(codeClass);
	}

    int indentLevel;

    void RenderMSTestClass(CodeClass2 codeClass)
    {
        indentLevel = 0;
		RenderLine(string.Format("namespace {0}", codeClass.Namespace.FullName));
		RenderLine("{");
		indentLevel++;
		
		RenderTestClassAttribute();
		RenderIgnoreAttributeIfNecessary(codeClass);
		RenderLine(string.Format("public partial class {0}", codeClass.Name));
		RenderLine("{");
		indentLevel++;
		RenderResultsVariable();
		RenderDelegateMethodsForClass(codeClass);
		--indentLevel;
		RenderLine("}");
		--indentLevel;
		RenderLine("}");
		WriteLine(string.Empty);
    }
	
	void RenderResultsVariable()
	{
		RenderLine("static new Dictionary<string, Action> __results = new Dictionary<string, Action>();");
		RenderLine(string.Empty);
	}

	void RenderDelegateMethodsForClass(CodeClass2 codeClass)
	{
		RenderClassInitializeMethod(codeClass);
		RenderTestMethods(codeClass);
	}
	
	void RenderTestMethods(CodeClass2 codeClass)
	{
		var its = GetIts(codeClass);
		
		foreach(CodeVariable2 it in its)
		{
			RenderTestMethod(it);
		}
	}
	
	void RenderTestMethod(CodeVariable2 it)
	{
		RenderLine(string.Empty);
		RenderAttribute(TestMethodName);
		RenderIgnoreAttributeIfNecessary(it);
		RenderLine(string.Format("public void It_{0}()", it.Name));
		RenderLine("{");
		indentLevel++;
		RenderLine(string.Format(@"__results[""{0}""]();", it.Name));
		indentLevel--;
		RenderLine("}");
	}
	
	void RenderIgnoreAttributeIfNecessary(CodeVariable2 it)
	{
		if(HasIgnoredAttribute(it))
		{
			RenderAttribute("Ignore");
		}
	}
	
	void RenderIgnoreAttributeIfNecessary(CodeClass2 codeClass)
	{
		if(HasIgnoredAttribute(codeClass))
		{
			RenderAttribute("Ignore");
		}
	}
	
	void RenderClassInitializeMethod(CodeClass2 codeClass)
	{
		RenderClassInitializeAttribute();
		RenderLine(string.Format("public static void {0}(TestContext context)", ClassInitializeMethodName));
		RenderLine("{");
		indentLevel++;
		RenderLine(string.Format("MSMSpec.TestExecutionHelper.Process<{0}>(__results);", codeClass.Name));
		indentLevel--;
		RenderLine("}");
	}

    void RenderLine(string content)
    {
		RenderIndents(indentLevel);
	    WriteLine(content);
    }

	void RenderClassInitializeAttribute()
	{
		RenderAttribute(ClassInitializeName);
	}
	
	void RenderTestClassAttribute()
	{
		RenderAttribute(TestClassName);
	}

	void RenderAttribute(string attributeString)
	{
		RenderLine(string.Format("[{0}]", attributeString));
	}
    
    void RenderIndents(int count)
    {
	    RenderSpaces(count * 4);
    }
    
    void RenderSpaces(int count)
    {
	    var spaces = new string(' ', count);
        Write(spaces);
    }
    
    void SetOriginalClassAsPartial(CodeClass2 codeClass)
    {
		if (codeClass.ClassKind != vsCMClassKind.vsCMClassKindPartialClass)
	    {
	        codeClass.ClassKind = vsCMClassKind.vsCMClassKindPartialClass;
		}
    }
    
	IEnumerable<CodeVariable2> GetIts(CodeClass2 @class)
	{
		return Variables(@class).Where(x=>x.Type.AsFullName == ItTypeName);
	}
	
    IEnumerable<CodeVariable2> Variables(CodeClass2 @class)
    {
	    return Children(@class).Where(x=>x.Kind == vsCMElement.vsCMElementVariable)
			.Cast<CodeVariable2>();
    }

	IEnumerable<CodeElement> Attributes(CodeClass2 @class)
    {
	    foreach (CodeElement element in @class.Attributes)
        {
	        yield return element;
        }
    }
	
	IEnumerable<CodeElement> Attributes(CodeVariable2 variable)
    {
	    foreach (CodeElement element in variable.Attributes)
        {
	        yield return element;
        }
    }

    IEnumerable<CodeElement> Children(CodeClass2 @class)
    {
	  foreach (CodeElement element in @class.Children)
	  {
		yield return element;
      }
    }

    Project GetProjectContainingT4File(DTE dte)
    {

	    // Find the .tt file's ProjectItem
	    ProjectItem projectItem = dte.Solution.FindProjectItem(Host.TemplateFile);

        // If the .tt file is not opened, open it
        if (projectItem.Document == null)
			projectItem.Open(EnvDTE.Constants.vsViewKindCode);
        
                                                                             
        if (AlwaysKeepTemplateDirty)
        {
	        // Mark the .tt file as unsaved. This way it will be saved and update itself next time the
	        // project is built. Basically, it keeps marking itself as unsaved to make the next build work.
			// Note: this is certainly hacky, but is the best I could come up with so far.
			projectItem.Document.Saved = false;
        }

		return projectItem.ContainingProject;
	}



    public IEnumerable<CodeElement> CodeElementsInProjectItems(IEnumerable<ProjectItem> projectItems)
    {
	   foreach (ProjectItem projectItem in projectItems)
	   {
			foreach (CodeElement el in CodeElementsInProjectItem(projectItem))
			{
				yield return el;
			}
		}
	}

    public IEnumerable<CodeElement> CodeElementsInProjectItem(ProjectItem projectItem)
    {
	   FileCodeModel fileCodeModel = projectItem.FileCodeModel;

		if (fileCodeModel != null)
		{
			foreach (CodeElement codeElement in fileCodeModel.CodeElements)
			{
				//WalkElements(codeElement, null);
				foreach (CodeElement el in CodeElementDescendantsAndSelf(codeElement))
				{
					yield return el;
				}
			}
		}

		if (projectItem.ProjectItems != null)
		{
			foreach (ProjectItem childItem in projectItem.ProjectItems)
			{
				foreach (CodeElement el in CodeElementsInProjectItem(childItem))
				{
					yield return el;
				}
			}
		}
	}


	public IEnumerable<CodeElement> CodeElementsDescendants(CodeElements codeElements)
	{
		foreach (CodeElement element in codeElements)
		{
			foreach (CodeElement descendant in CodeElementDescendantsAndSelf(element))
			{
				yield return descendant;
			}
		}
	}
    
    public IEnumerable<CodeElement> CodeElementDescendantsAndSelf(CodeElement codeElement)
	{
		yield return codeElement;
 
		CodeElements codeElements;
 
		switch(codeElement.Kind)
		{        
 
			/* namespaces */
			case vsCMElement.vsCMElementNamespace:
			{
				CodeNamespace codeNamespace = (CodeNamespace)codeElement;                                        
				codeElements = codeNamespace.Members;
				foreach(CodeElement descendant in CodeElementsDescendants(codeElements))
				{
					yield return descendant;                
				}
				break;
			}
 
			/* Process classes */
			case vsCMElement.vsCMElementClass:
			{            
				CodeClass codeClass = (CodeClass)codeElement;            
				codeElements = codeClass.Members;
				foreach(CodeElement descendant in CodeElementsDescendants(codeElements))
				{                
					yield return descendant;                
				}            
				break;    
			}        
		}    
	}
	
	public bool IsProjectItemADirectory(ProjectItem projectItem)
	{
		return Directory.Exists(projectItem.FileNames[0]);
	}
	
	
// Manager class records the various blocks so it can split them up
class Manager {
    private class Block {
        public String Name;
		public ProjectItem ProjectItem;
        public int Start, Length;
    }

    private Block currentBlock;
    private List<Block> files = new List<Block>();
    private Block footer = new Block();
    private Block header = new Block();
    private ITextTemplatingEngineHost host;
    private StringBuilder template;
    protected List<String> generatedFileNames = new List<String>();
	protected List<Tuple<ProjectItem, string>> generatedItems = new List<Tuple<ProjectItem, string>>();
	
    public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
        return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
    }

    public void StartNewFile(ProjectItem projectItem, String name) {
        if (name == null)
            throw new ArgumentNullException("name");
        CurrentBlock = new Block { Name = name, ProjectItem = projectItem };
    }
	
	public virtual void DeleteProjectItem(ProjectItem projectItem)
	{
		projectItem.Delete();
	}

    public void StartFooter() {
        CurrentBlock = footer;
    }

    public void StartHeader() {
        CurrentBlock = header;
    }

    public void EndBlock() {
        if (CurrentBlock == null)
            return;
        CurrentBlock.Length = template.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
            files.Add(CurrentBlock);
        currentBlock = null;
    }

    public virtual void Process(bool split) {
        if (split) {
            EndBlock();
            String headerText = template.ToString(header.Start, header.Length);
            String footerText = template.ToString(footer.Start, footer.Length);
            String templateDirectory = Path.GetDirectoryName(host.TemplateFile);
            String outputPath = Path.GetDirectoryName(host.TemplateFile);
            files.Reverse();
            foreach(Block block in files) {
                String fileName = Path.Combine(outputPath, block.Name);
                String content = headerText + template.ToString(block.Start, block.Length) + footerText;
				generatedItems.Add(new Tuple<ProjectItem, string>(block.ProjectItem, fileName));
                CreateFile(fileName, content);
                template.Remove(block.Start, block.Length);
            }
        }
    }

    protected virtual void CreateFile(String fileName, String content) {
        if (IsFileContentDifferent(fileName, content))
            File.WriteAllText(fileName, content);
    }

    public virtual String GetCustomToolNamespace(String fileName) {
        return null;
    }

    public virtual String DefaultProjectNamespace {
        get { return null; }
    }

    protected bool IsFileContentDifferent(String fileName, String newContent) {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }

    private Manager(ITextTemplatingEngineHost host, StringBuilder template) {
        this.host = host;
        this.template = template;
    }

    private Block CurrentBlock {
        get { return currentBlock; }
        set {
            if (CurrentBlock != null)
                EndBlock();
            if (value != null)
                value.Start = template.Length;
            currentBlock = value;
        }
    }

    private class VSManager: Manager {
        private EnvDTE.ProjectItem templateProjectItem;
        private EnvDTE.DTE dte;
        private Action<String> checkOutAction;
		
        public override String DefaultProjectNamespace {
            get {
                return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
            }
        }

        public override String GetCustomToolNamespace(string fileName) {
            return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
        }

        public override void Process(bool split) {
            if (templateProjectItem.ProjectItems == null)
                return;
            base.Process(split);
			ProjectSync(generatedItems);
        }

        protected override void CreateFile(String fileName, String content) {
            if (IsFileContentDifferent(fileName, content)) {
                CheckoutFileIfRequired(fileName);
                File.WriteAllText(fileName, content);
            }
        }
		
		public override void DeleteProjectItem(ProjectItem projectItem){
			CheckoutFileIfRequired(projectItem.FileNames[0]);
			projectItem.Delete();
		}

        internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
            : base(host, template) {
            var hostServiceProvider = (IServiceProvider) host;
            if (hostServiceProvider == null)
                throw new ArgumentNullException("Could not obtain IServiceProvider");
            dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte == null)
                throw new ArgumentNullException("Could not obtain DTE from host");
            templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
            checkOutAction = (String fileName) => dte.SourceControl.CheckOutItem(fileName);
        }

		private static void ProjectSync(IEnumerable<Tuple<ProjectItem, string>> keepFileInfos)
		{
			foreach(Tuple<ProjectItem, string> item in keepFileInfos)
			{
				item.Item1.ProjectItems.AddFromFile(item.Item2);
			}
		}

        private void CheckoutFileIfRequired(String fileName) {
            var sc = dte.SourceControl;
            if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
                checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
        }
    }
}

#>